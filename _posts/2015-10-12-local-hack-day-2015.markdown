---
layout: post
title:  "Local Hack Day 2015 @ General Assembly: A Recap"
short_title: "Local Hack Day 2015: A Recap"
tagline: Over the weekend, I went to Local Hack Day 2015 @ General Assembly. Local Hack Day is a pretty cool event because other students around the world host their own Local Hack Days simultaneously.
preview_image_path: /images/design-calenday.png
---

Over the weekend, I went to Local Hack Day 2015 @ General Assembly. Local Hack Day is a pretty cool event because other students around the world host their own Local Hack Days simultaneously. Also, MLH hosts a livestream throughout the day so everyone's "watching" lectures at the same time and can comment and ask questions in real-time as well, which is really cool.

Here's my recap to what happened at Local Hack Day:

**6:00 AM:** I wake up this early to catch a NJTransit train to take me to Penn Station so I can get to General Assembly on time. Quite suprisingly, this isn't that bad because I still wake up at 5:15 AM for school everyday anyways, so those extra 45 minutes are like heaven for me.

**8:30 AM:** I get to General Assembly. Well, I think I get there, but I can't find the door. It takes me about 30 minutes to figure out where to go until I see someone with a Local Hack Day hat walk outside and ask me if I'm lost. Thanks!

**9:00 AM:** I finally get into the building. I've never been here before, but I can see why people hype it up so much. It's a really nice place, and it sort of reminds me of the art gallery Make School had taken over for the summer in NYC. I'd totally take a class here if I had time. I see Mamadou Kaba, one of my fellow classmates from the Make School program. He's organizing, which is cool. After signing in and receiving a free swag pack, I find a table and set up shop.

**9:15 AM:** It slowly dawns on me that I don't know anyone else here except Mamadou. Might have to go solo this time around.

**9:30 AM:** Opening ceremony time. Guess who's here? Minerva Tantoco, the CTO of New York City. This is probably the third time I've seen her since the summer. Her talk is still great. She leaves right afterwards, probably to go visit another Local Hack Day somewhere else in the city. The organizers go over logistics and scheduling, and suddenly, we're off!

**10:00 AM:** I'm creating a game tenatively called *Math Madness*. I'm not exactly sure where I'm going with this, but I know that I wanted to make a semi-educational game about math and one that's two player. The current concept is that two players play *on the same phone* (like [*Tile, Tap, Push!*](http://zacharyespiritu.com/TileTapPush)) and have to form a math equation from 12 tiles on their side of the screen in order to reach a target number. Why 12 tiles? Because that's the number that allows me to evenly fit 4 tiles in 3 rows in order to accomodate the two-player nature of the game. Each of the tiles will have a random set of operators and numbers from which the player can work with. I take about 30 minutes to sketch everything out.

**10:30 AM:** I'm working in reverse and creating my UI design in Sketch and a logo. Before you yell at me, there's two reasons why I'm doing this: first, I need to calculate how big to make each of the tiles and how much space I'll have for a "double-sided" HUD in the center of the screen, and second, Spritebuilder makes it very hard to switch between a placeholder `CCNodeColor` and a `CCSprite`, so I might as well start out with the `CCSprite`. I encounter some difficulties with determining the correct dimensions of the sprite frame because of Spritebuilder's retina auto-scaling feature, which takes up some time.

**11:30 AM:** Now I'm working to generate the tiles with random numbers and operators at the beginning of each game. I don't want too many operators to spawn (otherwise there won't be enough numbers), nor do I want not enough (because then there wouldn't be enough options for the player to work with), so I create a spawning algorithm that makes 3 - 4 tiles spawn as operators and the remaining tiles as numbers.

**12:00 PM:** I realize that there's no way for the player to clear their pressed buttons if they make a mistake, no a way for the player to confirm that they've found a possible answer. I change two of the buttons to a gray "clear" button and a orange "=" button. This leaves 10 tiles to work with. Not bad.

**12:30 PM:** Lunch arrives. Pizza time!

**1:00 PM:** I have a second revelation: there's no way to guarantee that there's a possible answer with the current concept. If I generate the target number independently of the tiles (or vice versa) there's no way to check if there's a possible answer. I'm considering implementing a "no possible solution" button of some kind, but the problem that arises there, of course, is how to determine if there's no possible solution. Going to think about this more.

**2:00 PM:** One of the mentors suggests spawning all of the tiles first, then deriving a target number from that. That's a good idea.

**2:30 PM:** I've modified the concept such that the player now has *9 tiles* and must use *all* of them to create a math equation to reach a specified target number. This makes creating a puzzle generation algorithm much easier.

    func generateNewPuzzle() {
        // 1: Generate set of 5 random integers
        // 2: Generate set of 4 random operators (+, –, or x)
        // 3: Randomize order and alternate between integers and operators
        // 4: Calculate target number derived from that equation.
    }

**3:30 PM:** Implementing the algorithm into the actual game so the generated numbers display on the tiles.

**4:30 PM:** The game now works! Well, sort of—it still doesn't tell you if you got the answer right or not. I add a button shake animation to the "enter" button whenever you tap it and the answer is incorrect, and a fade out animation on the tiles whenever the answer is correct, which then transitions into a new puzzle.

**5:00 PM:** The game is now done! I go around and get people to playtest the game. It's fun watching people trying to figure out the solution to each of these puzzles. After playtesting for a while and getting some feedback, I make some minor improvements to the game (and to the code organization, because speed coding is not conducive to readable code). It's going much better than I thought it would be!

**6:00 PM:** A rap battle begins in the library, which is absolute fire. (Example: *"Python, JSON / I'ma get my code on"*) I'm still making UI improvements during the rap battle in the corner of the room.

**7:00 PM:** The rap battle is cut short by the arrival of Subway sandwiches for dinner. Oh well. I finished my project during the rap battle though, so I'm good. One of the mentors pulls out one of my favorite board games, *The Resistance*, and I play with them. I'm part of the Resistance, and we lose to the spies in the last turn. It's an awesome game, and you should totally check it out [here]().

**8:00 PM:** Presentations finally begin. I'm slated to go first, so in the 2 minutes before my presentation, I hack together a slideshow so I can show off the app icon before the actual demo. I'm crossing my fingers that an easy puzzle spawns during the demo so I don't have to worry about running out of time. Of course, it's a hard puzzle. However, with the audience's help, we get through it, which is pretty awesome. I had to throw this quote somewhere in my presentation: *"Who needs rap battles when you can have a Math Battle?"*

**8:30 PM:** Presentations end. The judges have a meeting to decide who won stuff. Another rap battle begins at the front of the room, because you can never have enough rap battles. Or maybe they're trying to spite me for dissing the concept of rap battles in my presentation. I don't really know, but it's still pretty fire as ever.

**8:45 PM:** The award ceremony begins. **I win "Best UI Design" for Math Battle!** And even though it was only a 12-hour hackathon, I'm really tired, so now it's time to sleep.
